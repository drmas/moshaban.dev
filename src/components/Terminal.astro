---
// Terminal component for keyboard navigation
---

<div id="terminal-overlay" class="terminal-overlay hidden" role="dialog" aria-labelledby="terminal-title" aria-hidden="true">
  <div class="terminal-window">
    <div class="terminal-header">
      <div class="terminal-controls">
        <button class="terminal-control close" id="close-terminal" aria-label="Close terminal">
          <span aria-hidden="true">×</span>
        </button>
        <button class="terminal-control minimize" aria-label="Minimize terminal">
          <span aria-hidden="true">−</span>
        </button>
        <button class="terminal-control maximize" aria-label="Maximize terminal">
          <span aria-hidden="true">□</span>
        </button>
      </div>
      <div class="terminal-title" id="terminal-title">
        mo@localhost:~/blog - Terminal
      </div>
    </div>
    
    <div class="terminal-body">
      <div id="terminal-output" class="terminal-output" role="log" aria-live="polite">
        <div class="terminal-line">
          <span class="terminal-info">Welcome to Mo's Blog Terminal v1.0.0</span>
        </div>
        <div class="terminal-line">
          <span class="terminal-info">Type 'help' to see available commands</span>
        </div>
        <div class="terminal-line">
          <span class="terminal-info">Press Ctrl+` to toggle terminal | ESC to close</span>
        </div>
      </div>
      
      <div class="terminal-input-line">
        <span class="terminal-prompt">mo@localhost:~/blog$ </span>
        <input 
          type="text" 
          id="terminal-input" 
          class="terminal-input" 
          autocomplete="off" 
          spellcheck="false"
          aria-label="Terminal command input"
        />
        <span class="terminal-cursor" id="terminal-cursor">_</span>
      </div>
    </div>
  </div>
</div>

<div class="terminal-hint" id="terminal-hint">
  <kbd>Ctrl</kbd> + <kbd>`</kbd> to open terminal
</div>

<style>
  .terminal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    transition: all 0.3s ease;
  }

  .terminal-overlay.hidden {
    opacity: 0;
    visibility: hidden;
    transform: scale(0.95);
  }

  .terminal-overlay.show {
    opacity: 1;
    visibility: visible;
    transform: scale(1);
  }

  .terminal-window {
    background: var(--bg-primary);
    border: 1px solid var(--border-primary);
    border-radius: 8px;
    width: 100%;
    max-width: 800px;
    max-height: 600px;
    display: flex;
    flex-direction: column;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
    animation: terminalSlideIn 0.3s ease-out;
  }

  @keyframes terminalSlideIn {
    from {
      opacity: 0;
      transform: translateY(-20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .terminal-header {
    background: var(--bg-secondary);
    border-bottom: 1px solid var(--border-primary);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 8px 8px 0 0;
  }

  .terminal-controls {
    display: flex;
    gap: 0.5rem;
  }

  .terminal-control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 8px;
    font-weight: bold;
    transition: all 0.2s ease;
    color: transparent;
  }

  .terminal-control:hover {
    color: var(--bg-primary);
    transform: scale(1.1);
  }

  .terminal-control.close {
    background: #ff5f56;
  }

  .terminal-control.minimize {
    background: #ffbd2e;
  }

  .terminal-control.maximize {
    background: #27ca3f;
  }

  .terminal-title {
    font-family: var(--font-mono);
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  .terminal-body {
    padding: 1rem;
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 400px;
    background: var(--bg-primary);
  }

  .terminal-output {
    flex: 1;
    font-family: var(--font-mono);
    font-size: 0.875rem;
    line-height: 1.5;
    color: var(--text-primary);
    overflow-y: auto;
    margin-bottom: 1rem;
    max-height: 300px;
  }

  .terminal-line {
    margin-bottom: 0.25rem;
    word-wrap: break-word;
  }

  .terminal-info {
    color: var(--accent-primary);
  }

  .terminal-success {
    color: var(--accent-success);
  }

  .terminal-error {
    color: var(--accent-error);
  }

  .terminal-warning {
    color: var(--accent-warning);
  }

  .terminal-command {
    color: var(--syntax-function);
    font-weight: 600;
  }

  .terminal-input-line {
    display: flex;
    align-items: center;
    font-family: var(--font-mono);
    font-size: 0.875rem;
    background: var(--bg-secondary);
    padding: 0.75rem;
    border-radius: 4px;
    border: 1px solid var(--border-primary);
  }

  .terminal-prompt {
    color: var(--accent-success);
    font-weight: 600;
    margin-right: 0.5rem;
    white-space: nowrap;
  }

  .terminal-input {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: var(--text-primary);
    font-family: var(--font-mono);
    font-size: 0.875rem;
    caret-color: var(--accent-primary);
  }

  .terminal-cursor {
    display: none;
  }

  .terminal-input-line {
    display: flex;
    align-items: center;
    font-family: var(--font-mono);
    font-size: 0.875rem;
    background: var(--bg-secondary);
    padding: 0.75rem;
    border-radius: 4px;
    border: 1px solid var(--border-primary);
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  .terminal-hint {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-family: var(--font-mono);
    font-size: 0.75rem;
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    gap: 0.25rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    opacity: 0.8;
    transition: opacity 0.2s ease;
    z-index: 100;
  }

  .terminal-hint:hover {
    opacity: 1;
  }

  .terminal-hint kbd {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: 3px;
    padding: 0.125rem 0.25rem;
    font-size: 0.6875rem;
    color: var(--text-primary);
    font-family: var(--font-mono);
  }

  /* Scrollbar for terminal output */
  .terminal-output::-webkit-scrollbar {
    width: 6px;
  }

  .terminal-output::-webkit-scrollbar-track {
    background: var(--bg-secondary);
  }

  .terminal-output::-webkit-scrollbar-thumb {
    background: var(--border-primary);
    border-radius: 3px;
  }

  .terminal-output::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
  }

  @media (max-width: 768px) {
    .terminal-overlay {
      padding: 1rem;
    }

    .terminal-window {
      max-height: 70vh;
    }

    .terminal-body {
      min-height: 300px;
    }

    .terminal-output {
      max-height: 200px;
    }

    .terminal-hint {
      bottom: 1rem;
      right: 1rem;
      font-size: 0.6875rem;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .terminal-cursor {
      animation: none;
    }

    .terminal-window {
      animation: none;
    }

    .terminal-overlay {
      transition: none;
    }
  }
</style>

<script>
  class Terminal {
    constructor() {
      this.isOpen = false;
      this.commandHistory = [];
      this.historyIndex = -1;
      this.currentPath = '/';
      
      this.commands = {
        help: () => this.showHelp(),
        ls: () => this.listFiles(),
        cd: (args) => this.changeDirectory(args),
        cat: (args) => this.viewFile(args),
        pwd: () => this.printWorkingDirectory(),
        clear: () => this.clearTerminal(),
        whoami: () => this.whoami(),
        date: () => this.showDate(),
        echo: (args) => this.echo(args),
        about: () => this.navigateToAbout(),
        blog: () => this.navigateToBlog(),
        home: () => this.navigateToHome(),
        exit: () => this.closeTerminal(),
        theme: (args) => this.changeTheme(args),
        contact: () => this.showContact(),
        tree: () => this.showTree(),
        search: (args) => this.searchPosts(args),
        grep: (args) => this.searchPosts(args),
        find: (args) => this.searchPosts(args)
      };

      this.init();
    }

    init() {
      this.overlay = document.getElementById('terminal-overlay');
      this.input = document.getElementById('terminal-input');
      this.output = document.getElementById('terminal-output');
      this.cursor = document.getElementById('terminal-cursor');
      this.closeBtn = document.getElementById('close-terminal');
      this.hint = document.getElementById('terminal-hint');

      this.setupEventListeners();
      this.updateCursorPosition();
    }

    setupEventListeners() {
      // Global keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        // Ctrl+` to toggle terminal
        if (e.ctrlKey && e.key === '`') {
          e.preventDefault();
          this.toggle();
        }
        
        // ESC to close terminal
        if (e.key === 'Escape' && this.isOpen) {
          e.preventDefault();
          this.close();
        }
      });

      // Terminal input handling
      this.input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          this.executeCommand();
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          this.navigateHistory(-1);
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.navigateHistory(1);
        } else if (e.key === 'Tab') {
          e.preventDefault();
          this.autocomplete();
        }
      });

      this.input.addEventListener('input', () => {
        this.updateCursorPosition();
      });

      // Close button
      this.closeBtn.addEventListener('click', () => {
        this.close();
      });

      // Click outside to close
      this.overlay.addEventListener('click', (e) => {
        if (e.target === this.overlay) {
          this.close();
        }
      });

      // Hide hint when terminal is open
      this.overlay.addEventListener('transitionend', () => {
        if (this.isOpen) {
          this.hint.style.display = 'none';
        } else {
          this.hint.style.display = 'flex';
        }
      });
    }

    toggle() {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    open() {
      this.isOpen = true;
      this.overlay.classList.remove('hidden');
      this.overlay.classList.add('show');
      this.overlay.setAttribute('aria-hidden', 'false');
      
      // Focus the input after animation
      setTimeout(() => {
        this.input.focus();
      }, 100);
    }

    close() {
      this.isOpen = false;
      this.overlay.classList.remove('show');
      this.overlay.classList.add('hidden');
      this.overlay.setAttribute('aria-hidden', 'true');
    }

    closeTerminal() {
      this.addOutput('Goodbye! 👋', 'terminal-success');
      setTimeout(() => {
        this.close();
      }, 500);
    }

    executeCommand() {
      const command = this.input.value.trim();
      if (!command) return;

      // Add to history
      this.commandHistory.push(command);
      this.historyIndex = this.commandHistory.length;

      // Display command
      this.addOutput(`mo@localhost:~/blog$ ${command}`, 'terminal-command');

      // Parse and execute
      const [cmd, ...args] = command.split(' ');
      const handler = this.commands[cmd.toLowerCase()];

      if (handler) {
        handler(args);
      } else {
        this.addOutput(`bash: ${cmd}: command not found`, 'terminal-error');
        this.addOutput(`Type 'help' to see available commands`, 'terminal-info');
      }

      // Clear input
      this.input.value = '';
      this.updateCursorPosition();
    }

    navigateHistory(direction) {
      const newIndex = this.historyIndex + direction;
      
      if (newIndex >= 0 && newIndex < this.commandHistory.length) {
        this.historyIndex = newIndex;
        this.input.value = this.commandHistory[this.historyIndex];
      } else if (newIndex === this.commandHistory.length) {
        this.historyIndex = newIndex;
        this.input.value = '';
      }
      
      this.updateCursorPosition();
    }

    autocomplete() {
      const input = this.input.value.toLowerCase();
      const matches = Object.keys(this.commands).filter(cmd => 
        cmd.startsWith(input)
      );

      if (matches.length === 1) {
        this.input.value = matches[0];
        this.updateCursorPosition();
      } else if (matches.length > 1) {
        this.addOutput(`Possible completions: ${matches.join(', ')}`, 'terminal-info');
      }
    }

    updateCursorPosition() {
      // Use the native browser cursor instead of custom positioning
      // This is more reliable and accessible
    }

    addOutput(text, className = '') {
      const line = document.createElement('div');
      line.className = `terminal-line ${className}`;
      line.textContent = text;
      this.output.appendChild(line);
      this.output.scrollTop = this.output.scrollHeight;
    }

    // Command implementations
    showHelp() {
      const helpText = [
        '',
        'Available commands:',
        '',
        '  Navigation:',
        '    ls         - List available pages and posts',
        '    cd <path>  - Navigate to different sections',
        '    pwd        - Show current location',
        '    home       - Go to homepage',
        '    blog       - Go to blog section',
        '    about      - Go to about page',
        '    search <term> - Search blog posts',
        '',
        '  Content:',
        '    cat <file> - View post content',
        '    tree       - Show site structure',
        '',
        '  System:',
        '    whoami     - Show user info',
        '    date       - Show current date',
        '    clear      - Clear terminal',
        '    help       - Show this help',
        '    exit       - Close terminal',
        '',
        '  Keyboard shortcuts:',
        '    Ctrl+`     - Toggle terminal',
        '    ESC        - Close terminal',
        '    ↑/↓        - Navigate command history',
        '    Tab        - Autocomplete commands',
        ''
      ];

      helpText.forEach(line => this.addOutput(line, 'terminal-info'));
    }

    listFiles() {
      const files = [
        'about.md',
        'blog/',
        '  ├── getting-started-with-astro.md',
        '  └── declarative-ui-in-modern-mobile-development.md',
        'README.md'
      ];

      this.addOutput('', '');
      files.forEach(file => this.addOutput(file, 'terminal-success'));
      this.addOutput('', '');
    }

    changeDirectory(args) {
      if (!args[0]) {
        this.currentPath = '/';
        this.addOutput('Changed to home directory', 'terminal-success');
        return;
      }

      const validPaths = ['/', '/blog', '/about', 'blog', 'about', '..', '~'];
      const path = args[0];

      if (validPaths.includes(path)) {
        if (path === '..' || path === '~') {
          this.currentPath = '/';
        } else {
          this.currentPath = path.startsWith('/') ? path : `/${path}`;
        }
        this.addOutput(`Changed directory to ${this.currentPath}`, 'terminal-success');
      } else {
        this.addOutput(`cd: ${path}: No such directory`, 'terminal-error');
      }
    }

    viewFile(args) {
      if (!args[0]) {
        this.addOutput('cat: missing file argument', 'terminal-error');
        return;
      }

      const file = args[0];
      if (file.includes('astro')) {
        this.addOutput('Opening Astro blog post...', 'terminal-success');
        setTimeout(() => {
          window.location.href = '/blog/getting-started-with-astro';
        }, 1000);
      } else if (file.includes('declarative') || file.includes('mobile')) {
        this.addOutput('Opening mobile development post...', 'terminal-success');
        setTimeout(() => {
          window.location.href = '/blog/declerative-ui-in-modern-mobile-development';
        }, 1000);
      } else if (file === 'about.md') {
        this.addOutput('Opening about page...', 'terminal-success');
        setTimeout(() => {
          window.location.href = '/about';
        }, 1000);
      } else {
        this.addOutput(`cat: ${file}: No such file`, 'terminal-error');
      }
    }

    printWorkingDirectory() {
      this.addOutput(this.currentPath || '/', 'terminal-info');
    }

    clearTerminal() {
      this.output.innerHTML = '';
    }

    whoami() {
      this.addOutput('Mo Shaban - Software Engineer', 'terminal-success');
      this.addOutput('Building elegant solutions with modern web technologies', 'terminal-info');
    }

    showDate() {
      this.addOutput(new Date().toString(), 'terminal-info');
    }

    echo(args) {
      this.addOutput(args.join(' '), 'terminal-info');
    }

    navigateToAbout() {
      this.addOutput('Navigating to about page...', 'terminal-success');
      setTimeout(() => {
        window.location.href = '/about';
      }, 1000);
    }

    navigateToBlog() {
      this.addOutput('Navigating to blog...', 'terminal-success');
      setTimeout(() => {
        window.location.href = '/';
      }, 1000);
    }

    navigateToHome() {
      this.addOutput('Navigating to homepage...', 'terminal-success');
      setTimeout(() => {
        window.location.href = '/';
      }, 1000);
    }

    showContact() {
      const contacts = [
        '',
        'Contact Information:',
        '',
        '📧 Email: hello@moshaban.dev',
        '🐙 GitHub: github.com/drmas',
        '🐦 Twitter: @_mo_shaban',
        '💼 LinkedIn: linkedin.com/in/drmohamedshaban/',
        ''
      ];

      contacts.forEach(line => this.addOutput(line, 'terminal-info'));
    }

    showTree() {
      const tree = [
        '',
        'Site Structure:',
        '',
        '/',
        '├── about.md',
        '├── blog/',
        '│   ├── getting-started-with-astro.md',
        '│   └── declarative-ui-in-modern-mobile-development.md',
        '├── assets/',
        '│   ├── astro.svg',
        '│   └── background.svg',
        '└── README.md',
        ''
      ];

      tree.forEach(line => this.addOutput(line, 'terminal-success'));
    }

    searchPosts(args) {
      if (!args || args.length === 0) {
        this.addOutput('Usage: search <search term>', 'terminal-error');
        this.addOutput('Example: search astro', 'terminal-info');
        return;
      }

      const searchTerm = args.join(' ');
      this.addOutput(`Searching for "${searchTerm}"...`, 'terminal-info');
      
      // Open the search overlay with the term
      if (window.searchInstance) {
        setTimeout(() => {
          this.close();
          window.searchInstance.open();
          setTimeout(() => {
            const searchInput = document.getElementById('search-input');
            if (searchInput) {
              searchInput.value = searchTerm;
              searchInput.dispatchEvent(new Event('input'));
            }
          }, 200);
        }, 500);
      } else {
        this.addOutput('Search not available', 'terminal-error');
      }
    }
  }

  // Initialize terminal when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new Terminal();
    });
  } else {
    new Terminal();
  }
</script>